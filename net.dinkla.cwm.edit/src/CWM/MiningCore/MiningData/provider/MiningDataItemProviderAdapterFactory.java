/**
 * (c) 2007 Joern Dinkla, www.dinkla.net
 * 
 *
 * $Id$
 */
package CWM.MiningCore.MiningData.provider;

import CWM.MiningCore.MiningData.util.MiningDataAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MiningDataItemProviderAdapterFactory extends MiningDataAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MiningDataItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.AttributeAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeAssignmentItemProvider attributeAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.AttributeAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAssignmentAdapter() {
		if (attributeAssignmentItemProvider == null) {
			attributeAssignmentItemProvider = new AttributeAssignmentItemProvider(this);
		}

		return attributeAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.AttributeAssignmentSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeAssignmentSetItemProvider attributeAssignmentSetItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.AttributeAssignmentSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAssignmentSetAdapter() {
		if (attributeAssignmentSetItemProvider == null) {
			attributeAssignmentSetItemProvider = new AttributeAssignmentSetItemProvider(this);
		}

		return attributeAssignmentSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.AttributeUsage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeUsageItemProvider attributeUsageItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.AttributeUsage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeUsageAdapter() {
		if (attributeUsageItemProvider == null) {
			attributeUsageItemProvider = new AttributeUsageItemProvider(this);
		}

		return attributeUsageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.AttributeUsageSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeUsageSetItemProvider attributeUsageSetItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.AttributeUsageSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeUsageSetAdapter() {
		if (attributeUsageSetItemProvider == null) {
			attributeUsageSetItemProvider = new AttributeUsageSetItemProvider(this);
		}

		return attributeUsageSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.CategoricalAttributeProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoricalAttributePropertiesItemProvider categoricalAttributePropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.CategoricalAttributeProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoricalAttributePropertiesAdapter() {
		if (categoricalAttributePropertiesItemProvider == null) {
			categoricalAttributePropertiesItemProvider = new CategoricalAttributePropertiesItemProvider(this);
		}

		return categoricalAttributePropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.DirectAttributeAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectAttributeAssignmentItemProvider directAttributeAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.DirectAttributeAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectAttributeAssignmentAdapter() {
		if (directAttributeAssignmentItemProvider == null) {
			directAttributeAssignmentItemProvider = new DirectAttributeAssignmentItemProvider(this);
		}

		return directAttributeAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.LogicalAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalAttributeItemProvider logicalAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.LogicalAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalAttributeAdapter() {
		if (logicalAttributeItemProvider == null) {
			logicalAttributeItemProvider = new LogicalAttributeItemProvider(this);
		}

		return logicalAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.LogicalData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalDataItemProvider logicalDataItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.LogicalData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalDataAdapter() {
		if (logicalDataItemProvider == null) {
			logicalDataItemProvider = new LogicalDataItemProvider(this);
		}

		return logicalDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.NumericalAttributeProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericalAttributePropertiesItemProvider numericalAttributePropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.NumericalAttributeProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericalAttributePropertiesAdapter() {
		if (numericalAttributePropertiesItemProvider == null) {
			numericalAttributePropertiesItemProvider = new NumericalAttributePropertiesItemProvider(this);
		}

		return numericalAttributePropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.OrdinalAttributeProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrdinalAttributePropertiesItemProvider ordinalAttributePropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.OrdinalAttributeProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrdinalAttributePropertiesAdapter() {
		if (ordinalAttributePropertiesItemProvider == null) {
			ordinalAttributePropertiesItemProvider = new OrdinalAttributePropertiesItemProvider(this);
		}

		return ordinalAttributePropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.PhysicalData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalDataItemProvider physicalDataItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.PhysicalData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalDataAdapter() {
		if (physicalDataItemProvider == null) {
			physicalDataItemProvider = new PhysicalDataItemProvider(this);
		}

		return physicalDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.PivotAttributeAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PivotAttributeAssignmentItemProvider pivotAttributeAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.PivotAttributeAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPivotAttributeAssignmentAdapter() {
		if (pivotAttributeAssignmentItemProvider == null) {
			pivotAttributeAssignmentItemProvider = new PivotAttributeAssignmentItemProvider(this);
		}

		return pivotAttributeAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.ReversePivotAttributeAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReversePivotAttributeAssignmentItemProvider reversePivotAttributeAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.ReversePivotAttributeAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReversePivotAttributeAssignmentAdapter() {
		if (reversePivotAttributeAssignmentItemProvider == null) {
			reversePivotAttributeAssignmentItemProvider = new ReversePivotAttributeAssignmentItemProvider(this);
		}

		return reversePivotAttributeAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.SetAttributeAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetAttributeAssignmentItemProvider setAttributeAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.SetAttributeAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetAttributeAssignmentAdapter() {
		if (setAttributeAssignmentItemProvider == null) {
			setAttributeAssignmentItemProvider = new SetAttributeAssignmentItemProvider(this);
		}

		return setAttributeAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.Category} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryItemProvider categoryItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.Category}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryAdapter() {
		if (categoryItemProvider == null) {
			categoryItemProvider = new CategoryItemProvider(this);
		}

		return categoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.CategoryMap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryMapItemProvider categoryMapItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.CategoryMap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryMapAdapter() {
		if (categoryMapItemProvider == null) {
			categoryMapItemProvider = new CategoryMapItemProvider(this);
		}

		return categoryMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.CategoryMapObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryMapObjectItemProvider categoryMapObjectItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.CategoryMapObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryMapObjectAdapter() {
		if (categoryMapObjectItemProvider == null) {
			categoryMapObjectItemProvider = new CategoryMapObjectItemProvider(this);
		}

		return categoryMapObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.CategoryMapObjectEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryMapObjectEntryItemProvider categoryMapObjectEntryItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.CategoryMapObjectEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryMapObjectEntryAdapter() {
		if (categoryMapObjectEntryItemProvider == null) {
			categoryMapObjectEntryItemProvider = new CategoryMapObjectEntryItemProvider(this);
		}

		return categoryMapObjectEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.CategoryMapTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryMapTableItemProvider categoryMapTableItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.CategoryMapTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryMapTableAdapter() {
		if (categoryMapTableItemProvider == null) {
			categoryMapTableItemProvider = new CategoryMapTableItemProvider(this);
		}

		return categoryMapTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.CategoryMatrix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryMatrixItemProvider categoryMatrixItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.CategoryMatrix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryMatrixAdapter() {
		if (categoryMatrixItemProvider == null) {
			categoryMatrixItemProvider = new CategoryMatrixItemProvider(this);
		}

		return categoryMatrixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.CategoryMatrixEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryMatrixEntryItemProvider categoryMatrixEntryItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.CategoryMatrixEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryMatrixEntryAdapter() {
		if (categoryMatrixEntryItemProvider == null) {
			categoryMatrixEntryItemProvider = new CategoryMatrixEntryItemProvider(this);
		}

		return categoryMatrixEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.CategoryMatrixObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryMatrixObjectItemProvider categoryMatrixObjectItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.CategoryMatrixObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryMatrixObjectAdapter() {
		if (categoryMatrixObjectItemProvider == null) {
			categoryMatrixObjectItemProvider = new CategoryMatrixObjectItemProvider(this);
		}

		return categoryMatrixObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.CategoryMatrixTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryMatrixTableItemProvider categoryMatrixTableItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.CategoryMatrixTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryMatrixTableAdapter() {
		if (categoryMatrixTableItemProvider == null) {
			categoryMatrixTableItemProvider = new CategoryMatrixTableItemProvider(this);
		}

		return categoryMatrixTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.CategoryTaxonomy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryTaxonomyItemProvider categoryTaxonomyItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.CategoryTaxonomy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryTaxonomyAdapter() {
		if (categoryTaxonomyItemProvider == null) {
			categoryTaxonomyItemProvider = new CategoryTaxonomyItemProvider(this);
		}

		return categoryTaxonomyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link CWM.MiningCore.MiningData.MiningData_container} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MiningData_containerItemProvider miningData_containerItemProvider;

	/**
	 * This creates an adapter for a {@link CWM.MiningCore.MiningData.MiningData_container}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMiningData_containerAdapter() {
		if (miningData_containerItemProvider == null) {
			miningData_containerItemProvider = new MiningData_containerItemProvider(this);
		}

		return miningData_containerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (attributeAssignmentItemProvider != null) attributeAssignmentItemProvider.dispose();
		if (attributeAssignmentSetItemProvider != null) attributeAssignmentSetItemProvider.dispose();
		if (attributeUsageItemProvider != null) attributeUsageItemProvider.dispose();
		if (attributeUsageSetItemProvider != null) attributeUsageSetItemProvider.dispose();
		if (categoricalAttributePropertiesItemProvider != null) categoricalAttributePropertiesItemProvider.dispose();
		if (directAttributeAssignmentItemProvider != null) directAttributeAssignmentItemProvider.dispose();
		if (logicalAttributeItemProvider != null) logicalAttributeItemProvider.dispose();
		if (logicalDataItemProvider != null) logicalDataItemProvider.dispose();
		if (numericalAttributePropertiesItemProvider != null) numericalAttributePropertiesItemProvider.dispose();
		if (ordinalAttributePropertiesItemProvider != null) ordinalAttributePropertiesItemProvider.dispose();
		if (physicalDataItemProvider != null) physicalDataItemProvider.dispose();
		if (pivotAttributeAssignmentItemProvider != null) pivotAttributeAssignmentItemProvider.dispose();
		if (reversePivotAttributeAssignmentItemProvider != null) reversePivotAttributeAssignmentItemProvider.dispose();
		if (setAttributeAssignmentItemProvider != null) setAttributeAssignmentItemProvider.dispose();
		if (categoryItemProvider != null) categoryItemProvider.dispose();
		if (categoryMapItemProvider != null) categoryMapItemProvider.dispose();
		if (categoryMapObjectItemProvider != null) categoryMapObjectItemProvider.dispose();
		if (categoryMapObjectEntryItemProvider != null) categoryMapObjectEntryItemProvider.dispose();
		if (categoryMapTableItemProvider != null) categoryMapTableItemProvider.dispose();
		if (categoryMatrixItemProvider != null) categoryMatrixItemProvider.dispose();
		if (categoryMatrixEntryItemProvider != null) categoryMatrixEntryItemProvider.dispose();
		if (categoryMatrixObjectItemProvider != null) categoryMatrixObjectItemProvider.dispose();
		if (categoryMatrixTableItemProvider != null) categoryMatrixTableItemProvider.dispose();
		if (categoryTaxonomyItemProvider != null) categoryTaxonomyItemProvider.dispose();
		if (miningData_containerItemProvider != null) miningData_containerItemProvider.dispose();
	}

}
